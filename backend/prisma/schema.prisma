generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql" url = env("DATABASE_URL") }

// ===== Enums =====
enum Role { ADMIN STAFF CONSIGNMENT QUOTE_VIEWER }
enum DocKind { QUOTE INVOICE RECEIPT DELIVERY CONSALE }
enum DocStatus { DRAFT ISSUED PARTIAL PAID SHIPPED CANCELLED }
enum PartnerStatus { ACTIVE INACTIVE }

// ===== Core =====
model Branch {
  id        Int       @id @default(autoincrement())
  code      String    @unique
  name      String
  users     User[]
  products  Product[]
  documents Document[]
  partners  ConsignmentPartner[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([name])
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  name       String?
  role       Role
  branchId   Int?
  partnerId  Int?
  branch     Branch?   @relation(fields: [branchId], references: [id])
  partner    ConsignmentPartner? @relation(fields: [partnerId], references: [id])
  documents  Document[] @relation("CreatedDocuments")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([role])
  @@index([branchId])
  @@index([partnerId])
}

// ===== Catalog =====
model ProductType {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Product {
  id            Int       @id @default(autoincrement())
  barcode       String    @unique
  name          String
  productTypeId Int?
  productType   ProductType? @relation(fields: [productTypeId], references: [id])
  costPrice     Decimal   @db.Decimal(12,2)
  salePrice     Decimal   @db.Decimal(12,2)
  branchId      Int?
  branch        Branch?   @relation(fields: [branchId], references: [id])
  items         DocumentItem[]
  maps          ConsignmentCategoryMap[]
  inventories   ConsignmentInventory[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([name])
  @@index([branchId])
  @@index([productTypeId])
}

// ===== Documents =====
model Document {
  id           Int        @id @default(autoincrement())
  kind         DocKind
  status       DocStatus
  code         String     @unique
  issueDate    DateTime
  branchId     Int?
  branch       Branch?    @relation(fields: [branchId], references: [id])
  createdById  Int?
  creator      User?      @relation("CreatedDocuments", fields: [createdById], references: [id])
  partnerId    Int?       // only for CONSALE
  partner      ConsignmentPartner? @relation(fields: [partnerId], references: [id])
  customerName String?
  customerPhone String?
  customerEmail String?
  subTotal     Decimal    @db.Decimal(14,2)
  discount     Decimal    @db.Decimal(14,2)
  tax          Decimal    @db.Decimal(14,2)
  total        Decimal    @db.Decimal(14,2)
  commissionRate Decimal? @db.Decimal(5,2)
  note         String?
  items        DocumentItem[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([kind])
  @@index([status])
  @@index([branchId])
  @@index([createdById])
  @@index([issueDate])
  @@index([partnerId])
}

model DocumentItem {
  id          Int       @id @default(autoincrement())
  documentId  Int
  document    Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  productId   Int?
  product     Product?  @relation(fields: [productId], references: [id])
  name        String    // snapshot
  barcode     String?
  displayName String?
  displayCode String?
  qty         Decimal   @db.Decimal(12,2)
  unitPrice   Decimal   @db.Decimal(12,2)
  total       Decimal   @db.Decimal(14,2)
  categoryId  Int?
  category    ConsignmentCategory? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([documentId])
  @@index([productId])
  @@index([categoryId])
}

// ===== Consignment =====
model ConsignmentPartner {
  id             Int        @id @default(autoincrement())
  code           String?    @unique
  name           String
  phone          String?
  email          String?
  address        String?
  commissionRate Decimal?   @db.Decimal(5,2)
  status         PartnerStatus @default(ACTIVE)
  branchId       Int?
  branch         Branch?    @relation(fields: [branchId], references: [id])
  users          User[]
  documents      Document[]
  inventories    ConsignmentInventory[]
  categories     ConsignmentCategory[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([name])
  @@index([branchId])
}

model ConsignmentInventory {
  id          Int       @id @default(autoincrement())
  partnerId   Int
  productId   Int
  qtyOnHand   Decimal   @db.Decimal(12,2)
  price       Decimal?  @db.Decimal(12,2) // consignmentPrice
  partner     ConsignmentPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([partnerId, productId])
  @@index([productId])
}

model ConsignmentCategory {
  id        Int       @id @default(autoincrement())
  partnerId Int
  code      String
  name      String
  price     Decimal   @db.Decimal(12,2)
  partner   ConsignmentPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  maps      ConsignmentCategoryMap[]
  items     DocumentItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([partnerId, code])
  @@index([partnerId])
  @@index([name])
}

model ConsignmentCategoryMap {
  id        Int       @id @default(autoincrement())
  partnerId Int
  categoryId Int
  productId Int
  partner   ConsignmentPartner @relation(fields: [partnerId], references: [id], onDelete: Cascade)
  category  ConsignmentCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([partnerId, productId])
  @@index([categoryId])
  @@index([productId])
}
